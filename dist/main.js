!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r=function(e,n,t,r){return new(t||(t=Promise))((function(o,u){function i(e){try{c(r.next(e))}catch(e){u(e)}}function a(e){try{c(r.throw(e))}catch(e){u(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,a)}c((r=r.apply(e,n||[])).next())}))},o=function(e,n){var t,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=n.call(e,i)}catch(e){u=[6,e],r=0}finally{t=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},u=function(e){return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){switch(r.label){case 0:return n=e.lat,t=e.lng,[4,fetch("https://www.vegguide.org/search/by-lat-long/"+n+","+t)];case 1:return[4,r.sent().json()];case 2:return[2,r.sent()]}}))}))},i=function(e,n,t,r){return new(t||(t=Promise))((function(o,u){function i(e){try{c(r.next(e))}catch(e){u(e)}}function a(e){try{c(r.throw(e))}catch(e){u(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,a)}c((r=r.apply(e,n||[])).next())}))},a=function(e,n){var t,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=n.call(e,i)}catch(e){u=[6,e],r=0}finally{t=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},c=function(e){return i(void 0,void 0,void 0,(function(){var n;return a(this,(function(t){switch(t.label){case 0:return n=e.address1+"+"+e.address2+"+"+e.country,[4,fetch("https://maps.googleapis.com/maps/api/geocode/json?address="+n+"&key=AIzaSyCVF0MR-UK7X5IRbYzxSLM6B921NbZoFnM")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},l={name:"London",lat:51.5033,lng:-.1195},s={name:"Paris",lat:48.8566,lng:2.3522},f={name:"Seoul",lat:37.5665,lng:126.978},p=function(e,n){document.getElementById("restaurants").innerHTML="<h2>Showing restaurants in: "+n.name+"</h2><p>1: "+e[0].name+": "+e[0].short_description+" </p><p>2: "+e[1].name+": "+e[1].short_description+"</p><p>3: "+e[2].name+": "+e[2].short_description+"</p><p>4. "+e[3].name+": "+e[3].short_description+"</p><p>5. "+e[4].name+": "+e[4].short_description+"</p>"};u(l).then((function(e){console.log(e);var n=e.entries.splice(0,5);console.log(n),p(n,l)}));var d=function(e){var n,t;u(e).then((function(r){n=r.entries.splice(0,5),p(n,e),c(n[0]).then((function(e){return console.log(e.results[0].geometry.location),t=e.results[0].geometry.location}))})).then((function(){return c(n[0]).then((function(e){return console.log(e.results[0].geometry.location),t=e.results[0].geometry.location}))})).then((function(){return function(e,n,t){var r=new google.maps.Map(document.getElementById("map"),{zoom:11,center:e});new google.maps.Marker({position:t,map:r});return r}(e,0,t)}))};d(l),document.getElementById("paris-button").addEventListener("click",(function(){return d(s)})),document.getElementById("london-button").addEventListener("click",(function(){return d(l)})),document.getElementById("seoul-button").addEventListener("click",(function(){return d(f)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,